#Below Queries contain applications of correlated subqueries combined with the previously studied functions of sum(), count(), avg() along with sorting the output

Query-1
As a data analyst at a movie theatre, you have been tasked with analyzing the booking trends and identifying listings that have been successfully booked.
Your analysis will help the company understand the popularity of listings and make informed decisions for improving user experiences and maximizing revenue.
Task
•	What is the total number of customers in the database as "total_customers"?
Expected Output Format
total_customers
SELECT count(*) total_customers FROM customers 

Task
•	Find the average rating of movies having running_time greater than 178 as average_rating.
Expected Output Format
average_rating
SELECT avg(rating) as average_rating FROM movies
WHERE running_time > 178 ;

Task
•	Retrieve the movie with the longest running time.
Expected Output Format
movie_id
title
release_date
genre
rating
running_time

SELECT * FROM movies WHERE running_time = (SELECT max(running_time) FROM movies);

Query-4
Task
•	Calculate the total revenue generated by the cinema hall based on the cost of bookings between 4th June 2023 to 12th June 2023 as total_revenue.
Expected Output Format
total_revenue
SELECT sum(cost) as total_revenue FROM bookings
WHERE booking_date >= '2023-06-04' AND  booking_date <= '2023-06-12';

Query-5
Task
•	Calculate the total duration (in minutes) of all movies combined that are of the genre Drama as total_duration.
Expected Output Format
total_duration
SELECT sum(running_time) as total_duration FROM movies WHERE genre = "Drama";


Query-6
Task
•	How many bookings were made on each booking date?
Expected Output Format
booking_date COUNT(*)
SELECT booking_date, count(*) FROM bookings GROUP BY booking_date;

Query-7
Task
•	Calculate the total cost of all bookings made by each customer as total_cost and display the customer's name along with the total cost. Group the results by customer_id.
Expected Output Format
name
total_cost

SELECT c.name, sum(cost) as total_cost FROM customers c JOIN bookings b
ON c.customer_id = b.customer_id GROUP BY c.customer_id;

Query-8
Task
•	Calculate the total number of bookings as total_bookings made for each movie.
Expected Output Format
title
total_bookings
SELECT m.title, (SELECT count(*) FROM bookings WHERE movie_id = m.movie_id) as total_bookings
FROM movies m GROUP BY m.movie_id;

Query-9
Task
•	Find the customer id and name of the customer who made the first booking in the database.
Expected Output Format
customer_id
name

SELECT c.customer_id, c.name FROM customers c JOIN bookings b 
ON c.customer_id = b.customer_id
WHERE b.booking_date = (SELECT min(booking_date) FROM bookings) ;

Query-10
Task
•	Retrieve the customer names and the number of bookings made by each customer as booking_count, sorted in descending order of the booking count.
Expected Output Format
name
booking_count

SELECT c.name, (SELECT count(*) as booking_count FROM bookings WHERE customer_id = c.customer_id) booking_count
FROM customers c
ORDER BY booking_count desc;

Query-11
Task
•	Retrieve the total no of seats booked for a time later than 20:00:00 as total_seats_booked.
Expected Output Format
total_seats_booked
SELECT sum(ticket_quantity) as total_seats_booked 
FROM bookings WHERE timings > '20:00:00';



Query-12
Task
•	Retrieve the details of the customer who has bought the most number of tickets.
Expected Output Format
customer_id
name
gender
email_id
age

SELECT * FROM customers c WHERE c.customer_id IN 
(SELECT customer_id FROM bookings 
GROUP BY customer_id ORDER BY count(ticket_quantity) desc LIMIT 1) ;
